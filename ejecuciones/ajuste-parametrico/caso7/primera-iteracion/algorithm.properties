#####################################################
##-------------------------------------------------##
##   FICHERO DE PROPIEDADES DEL ALGORITMO A USAR   ##
##-------------------------------------------------##
#####################################################

## Propiedad que cambia el algoritmo de ejecucion
## Actualmente estan implementados:
##   - SA (Simulated Annealing)
##   - VNS (Variable Neighborhood Search)
algoritmo=VNS

##Posibles valores:
# - reduccionControladoresAIS
# - OnlyConstrains
# - reduccionControladoresYRestricciones   ( ANTIGUO )
# - fitGlobal
# - reduccionControladoresYRestriccionesYSimilitudYContinuidad  ( NUEVA )
#       -> Reducir controladores
#       -> Reducir incumplimiento de restricciones
#       -> Aumentar similitud a los estadillos
#       -> Procurar continuidad al momento del cambio
funcionFitnessFase2=reduccionControladoresYRestriccionesYSimilitudYContinuidad

# Tiempo maximo total que le permitimos al VNS ejecutarse,
# puesto que en nuestro sistema es crucial el tiempo,
# no debemos superar el umbral marcado.
#
# INTRODUCIR VALOR EN *MINUTOS*
maxTimeAllowed=10

## Ponderaciones de los fitness
## [ la suma de ponderaciones debe ser 1 ]
## Fitness1:  Reducir controladores
## Fitness2:  Reducir incumplimiento de restricciones
## Fitness3:  Procurar continuidad al momento del cambio
## Fitness4:  Aumentar similitud a los estadillos
## VALORES VIA METODO ROC
ponderacionFitness1=.52
ponderacionFitness2=.27
ponderacionFitness3=.15
ponderacionFitness4=.06


###########################
##  SIMULATED ANNEALING  ##
###########################

##Temperatura
temperaturaInicial=0.05
descensoTemperatura=0.9
iteracionesTemperatura=3000

##Condiciones de parada
condicionParadaPorcent=0.035
condicionParadaCiclos=50000
condicionParadaNumeroMejoras=0.02

##Generacion de soluciones del entorno (Movs en desuso)
pseudoAleatorio=normal
desviacionTipica=15
##Esta escrito en minutos despues se debera dividir entre el tamaño de slot para conseguir el numero de slots

##tamaño maximo y minimo de los movimientos que generan soluciones del entorno
tamañoMaxMov=60
tamañoMinMov=10

##Posibles valores: movimiento1,2,3,4,5 - En la clase DeciderMove esta explicado el funcionamiento de los movimientos y sus diferencias
movimientosEntorno=movimiento17

movimientosEntornoGreedy=movimientoGreedy2
porcentajeEleccionMov=0.10

maxMinMethod_min=1
maxMinMethod_max=2

#Minimo y maximo de intervalos consecutivos que se pueden seleccionar para hacer el movimiento 15
move15_min=1
move15_max=3
#Numero de iteraciones tras las que se refina la grid (movimiento 14 y derivados)
cicloRefinarGrid=1500

##################################
## VARIABLE NEIGHBORHOOD SEARCH ##
##################################

## Configurar la condicion de parada a emplear.
# IMPORTANTE: AL MENOS UNO DE LOS DOS DEBE SER True
flagCondicionParadaTiempo=False
flagCondicionParadaPorcentajeMejora=True

# Indica el tipo de VNS que se esta utilizando.
# Actualmente estan implementados:
#   - VND (Descendent VNS)
#   - RVNS (Reduced VNS)
#   - BVNS (Basic VNS)
#   - GVNS (General VNS)
#   - SVNS (Skewed VNS)
tipoVNS=VND

## Valor del parametro alpha dentro del VNS sesgado (Skewed)
skewed.alpha=5

# funcion de distancia a utilizar:
#   - "fitness": |f(x) - f(x')|
#   - "slots": num slots distintos entre si
skewed.funcionDistancia=slots

# Aqui se define que estructuras de vecindad se van a utilizar en el
# algoritmo. Para saber cuales son cada uno ver documentacion.
#
# USO: escribir los posibles valores separados por comas y SIN ESPACIOS.
# La estructura de vecindad se definira segun el orden indicado aqui,
# y utilizara un k_max igual al numero de movimientos aqui indicados.
#
# POSIBLES VALORES:
#   - movMaxCarga
#   - movMaxCarga.1,movMaxCarga.2,movMaxCarga.3,movMaxCarga.4
#   - movRejilla
#   - movRejilla.1,movRejilla.2,movRejilla.3,movRejilla.4
#   - movLibre
#neighborStructures=movRejilla,movMaxCarga.1,movMaxCarga.2,movMaxCarga.3,movMaxCarga.4,movLibre
#neighborStructures=movMaxCarga,movRejilla.1,movRejilla.2,movRejilla.3,movRejilla.4,movLibre
neighborStructures=movMaxCarga.1,movMaxCarga.2,movMaxCarga.3,movMaxCarga.4,movRejilla.1,movRejilla.2,movRejilla.3,movRejilla.4,movLibre
#neighborStructures=movRejilla.1,movRejilla.2,movRejilla.3,movRejilla.4,movMaxCarga.1,movMaxCarga.2,movMaxCarga.3,movMaxCarga.4,movLibre

# Flag que permite cambiar el comportamiento a la hora de elegir los entornos de
# determinista (linealmente een el orden definido) o probabilistico (segun la
# probabilidad definida)
neighborStructures.probabilistico=False

# Probabilidad inicial del grupo de entornos de tipo diversificacion.
# La probabilidad del grupo intensificacion sera la complementaria (1 - p).
# Debe estar entre 0 y 1
neighborStructures.probabilistico.probabilidadDiversificacion=0.9

# Unidades en las que variara la probabilidad de diversificacion
# (y por ende la de intensificacion) cada cierto numero de iteraciones
# determinadas por "neighborStructures.probabilistico.numeroIteraciones"
neighborStructures.probabilistico.variacion=0.2

# Numero de iteraciones en las que la probabilidad de diversificacion
# (y por ende la de intensificacion) varia en el numero de unidades
# determinado por "neighborStructures.probabilistico.variacion"
neighborStructures.probabilistico.numeroIteraciones=5

## Se comprueba la condicion de parada de porcentaje de mejora cada este numero de iteraciones
numIteracionesParaComprobarCondicionParadaPorcentaje=40000

## Porcentaje sin mejora que debe haber como maximo (condicion de parada [junto con el tiempo])
porcentajeMinimoMejoria=0.015

## Numero de iteraciones a ejecutar antes de ejecutar la
# condicion de parada de la busqueda (estocastica) local
numMaxIteracionesSinMejoraBusquedaLocal=5

## Porcentaje sin mejora que debe haber como maximo (condicion de parada [junto con el tiempo])
porcentajeMinimoMejoriaBusquedaLocal=0
